% Function to compute the Jacobian for the Newton-Rhapson
% method for the power flow problem in the 3-bus example

function J = computeJacobian_HW(t1, t2, t3, v1, v2, v3, Y)

    % J = [  J1, J2; ...
    %        J3, J4 ];
    
    % J1 = [ dP2/dt2, dP2/dt3; ...
    %        dP3/dt2, dP3/dt3 ];   
    % J2 = [ dP2/dv3; ...
    %        dP3/dv3];
    % J3 = [ dQ3/dt2, dQ3/dt3];
    % J4 = [ dQ3/dv3];
    

    % Computing J1
    J1 = [  v2 * v3 * abs(Y(2,3)) * sin(t2 - t3 - angle(Y(2,3))) ...
            + v2 * v1 * abs(Y(2,1)) * sin(t2 - t1 - angle(Y(2,1))), ...
                ...
                - v2 * v3 * abs(Y(2,3)) * sin(t2 - t3 - angle(Y(2,3))); ...
                ...
            - v3 * v2 * abs(Y(3,2)) * sin(t3 - t2 - angle(Y(3,2))), ...
            ...
                v3 * v1 * abs(Y(3,1))*sin(t3 - t1 - angle(Y(3,1))) ...
                + v3 * v2 * abs(Y(3,2))*sin(t3 - t2 - angle(Y(3,2))) ...
         ];

    % Computing J2
    J2 = [  - v2 * abs(Y(2,3)) * cos(t2 - t3 - angle(Y(2,3))); ...
            ...
            - v1 * abs(Y(3,1)) * cos(t3 - t1 - angle(Y(3,1))) ...
            - v2 * abs(Y(3,2)) * cos(t3 - t2 - angle(Y(3,2))) ...
            - 2*v3 * abs(Y(3,3)) * cos(- angle(Y(3,3))) ...
         ];
 

    % Computing J3
    J3 = [ v2 * v3 * abs(Y(3,2)) * cos(t3 - t2 - angle(Y(3,2))), ...
                ...
                - v3 * v1 * abs(Y(3,1)) * cos(t3 - t1 - angle(Y(3,1))) ...
                - v3 * v2 * abs(Y(3,2)) * cos(t3 - t2 - angle(Y(3,2))) ...
         ];


    
    % Computing J4
    J4 = - v1 * abs(Y(3,1)) * sin(t3 - t1 - angle(Y(3,1))) ...
         - v2 * abs(Y(3,2)) * sin(t3 - t2 - angle(Y(3,2))) ...
         - 2 * v3 * abs(Y(3,3)) * sin(- angle(Y(3,3)));

    % Assemble the Jacobian
    J = [ J1, J2; ...
          J3, J4 ...
        ]; 
end
